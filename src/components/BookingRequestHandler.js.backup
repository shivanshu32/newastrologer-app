import React, { useState, useEffect, useCallback } from 'react';
import { View, Alert } from 'react-native';
import { useSocket } from '../context/SocketContext';
import AsyncStorage from '@react-native-async-storage/async-storage';
import BookingRequestPopup from './BookingRequestPopup';
import { useNavigation } from '@react-navigation/native';

const API_BASE_URL = 'https://jyotishcallbackend-2uxrv.ondigitalocean.app/api/v1';

/**
 * Component to handle real-time booking requests for astrologers
 * This component should be included in the app's main layout/navigation
 * to ensure it's always active and listening for booking requests
 */
const BookingRequestHandler = () => {
  const [bookingRequest, setBookingRequest] = useState(null);
  const [isPopupVisible, setIsPopupVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isAccepting, setIsAccepting] = useState(false);
  const [isRejecting, setIsRejecting] = useState(false);
  
  // Get socket from context and navigation
  const { socket, isConnected } = useSocket();
  const navigation = useNavigation();
  
  // Component lifecycle debugging
  useEffect(() => {
    console.log('🚀 [BookingRequestHandler] Component mounted');
    console.log('🚀 [BookingRequestHandler] Initial socket:', socket?.id);
    console.log('🚀 [BookingRequestHandler] Initial connected:', isConnected);
    
    return () => {
      console.log('💀 [BookingRequestHandler] Component unmounting');
    };
  }, []);
  
  // Socket state change debugging
  useEffect(() => {
    console.log('🔄 [BookingRequestHandler] Socket state changed:');
    console.log('🔄 [BookingRequestHandler] Socket ID:', socket?.id);
    console.log('🔄 [BookingRequestHandler] Connected:', isConnected);
    console.log('🔄 [BookingRequestHandler] Socket connected:', socket?.connected);
  }, [socket, isConnected]);

  // Handle incoming booking request
  const handleBookingRequest = useCallback((request) => {
    console.log(' [DEBUG] Raw booking request received:', request);
    console.log(' [DEBUG] request.booking:', request.booking);
    console.log(' [DEBUG] request.user:', request.user);
    console.log(' [DEBUG] request.type:', request.type);
    console.log(' [DEBUG] request.rate:', request.rate);
    
    // Handle both data structures:
    // 1. Online bookings: data is nested under request.booking
    // 2. Offline/queued bookings: data is directly in request object
    let bookingData;
    let bookingId;
    
    if (request.booking && request.booking._id) {
      // Online booking - nested structure
      console.log(' [DEBUG] Processing online booking request');
      bookingData = request.booking;
      bookingId = request.booking._id;
    } else if (request.bookingId) {
      // Offline/queued booking - flat structure
      console.log(' [DEBUG] Processing offline/queued booking request');
      bookingData = {
        _id: request.bookingId,
        type: request.type,
        rate: request.rate,
        notes: request.notes,
        createdAt: request.createdAt,
        expiresAt: request.expiresAt,
        astrologer: request.astrologer,
        user: request.user,
        userInfo: request.userInfo,
        wasQueued: request.wasQueued,
        queuedAt: request.queuedAt
      };
      bookingId = request.bookingId;
    } else {
      console.error(' [ERROR] Invalid booking data - no booking ID found');
      console.error(' [ERROR] Request structure:', Object.keys(request));
      Alert.alert('Error', 'Invalid booking request received - missing booking ID');
      return;
    }
    
    if (!bookingId) {
      console.error(' [ERROR] No booking ID available');
      Alert.alert('Error', 'Invalid booking request received - no booking ID');
      return;
    }
    
    console.log(' [DEBUG] Extracted booking data:', bookingData);
    console.log(' [DEBUG] Booking ID:', bookingId);
    
    // Create a properly structured booking request object
    const structuredBookingRequest = {
      _id: bookingId,
      id: bookingId, // Fallback for compatibility
      user: request.user,
      type: request.type || bookingData.type,
      rate: request.rate || bookingData.rate,
      notes: request.notes || bookingData.notes,
      expiresAt: request.expiresAt || bookingData.expiresAt,
      createdAt: request.createdAt || bookingData.createdAt,
      // Include all booking fields
      ...bookingData,
      // Override with user data from the request for display
      userName: request.user?.name || bookingData.userName,
      userImage: request.user?.profileImage || bookingData.userImage,
      // Add queued booking specific fields
      wasQueued: request.wasQueued || false,
      queuedAt: request.queuedAt,
      userInfo: request.userInfo || bookingData.userInfo
    };
    
    console.log(' [DEBUG] Structured booking request:', structuredBookingRequest);
    console.log(' [DEBUG] Booking ID available:', structuredBookingRequest._id);
    
    setBookingRequest(structuredBookingRequest);
    setIsPopupVisible(true);
    setError(null); // Clear any previous errors
  }, []);

  // Handle accept booking request using socket event
  const handleAcceptBooking = useCallback(async () => {
    console.log(' [DEBUG] handleAcceptBooking called - START');
    console.log(' [DEBUG] Current booking request:', bookingRequest);
    console.log(' [DEBUG] Socket available:', !!socket);
    console.log(' [DEBUG] Socket connected:', socket?.connected);
    
    // Store booking request data locally to prevent state clearing issues
    const currentBookingRequest = bookingRequest;
    console.log(' [DEBUG] Stored booking request locally:', currentBookingRequest);
    
    if (!socket) {
      console.error(' [ERROR] Socket is not available');
      Alert.alert('Error', 'Connection not available. Please try again.');
      return;
    }

    if (!socket.connected) {
      console.error(' [ERROR] Socket is not connected');
      Alert.alert('Error', 'Not connected to server. Please try again.');
      return;
    }

    if (!currentBookingRequest?._id) {
      console.error(' [ERROR] No booking request ID available');
      console.error(' [ERROR] currentBookingRequest:', currentBookingRequest);
      Alert.alert('Error', 'Invalid booking request.');
      return;
    }

    try {
      setIsAccepting(true);
      console.log(' [DEBUG] About to emit booking_response event');
      console.log(' [DEBUG] Payload:', { bookingId: currentBookingRequest._id, status: 'accepted' });
      
      socket.emit('booking_response', 
        { bookingId: currentBookingRequest._id, status: 'accepted' },
        (response) => {
          console.log('🔥🔥🔥 [ASTROLOGER-APP] booking_response callback received! 🔥🔥🔥');
          console.log(' [DEBUG] Raw callback response:', JSON.stringify(response, null, 2));
          console.log(' [DEBUG] Socket ID:', socket?.id);
          console.log(' [DEBUG] Socket connected:', socket?.connected);
          console.log(' [DEBUG] Callback timestamp:', new Date().toISOString());
          console.log(' [DEBUG] Socket callback received:', response);
          console.log(' [DEBUG] Response type:', typeof response);
          console.log(' [DEBUG] Response.success:', response?.success);
          console.log(' [DEBUG] Navigation object available:', !!navigation);
          setIsAccepting(false);
          
          if (response?.success) {
            console.log(' [SUCCESS] Booking accepted successfully');
            setIsPopupVisible(false);
            setBookingRequest(null);
            
            // Handle different consultation types
            const consultationType = currentBookingRequest.type;
            console.log(' [DEBUG] Consultation type:', consultationType);
            
            if (consultationType === 'voice') {
              // For voice consultations, Exotel call should be triggered automatically by backend
              // Show success message and stay on current screen
              console.log(' [VOICE] Voice consultation accepted - Exotel call should be triggered by backend');
              Alert.alert(
                'Voice Call Accepted', 
                'The voice consultation has been accepted. The call will be initiated shortly via Exotel. Please wait for the incoming call.',
                [{ text: 'OK' }]
              );
              
              // Navigate to Home/Dashboard instead of WaitingRoom for voice calls
              try {
                navigation.navigate('Home');
                console.log(' [SUCCESS] Navigated to Home for voice consultation');
              } catch (navError) {
                console.error(' [ERROR] Navigation to Home failed:', navError);
              }
              
            } else {
              // For chat and video consultations, use the traditional WaitingRoom flow
              console.log(' [DEBUG] Non-voice consultation - navigating to WaitingRoom');
              try {
                navigation.navigate('Bookings', {
                  screen: 'WaitingRoom',
                  params: { 
                    bookingId: currentBookingRequest._id,
                    bookingDetails: currentBookingRequest 
                  }
                });
                console.log(' [SUCCESS] Navigation.navigate called successfully');
              } catch (navError) {
                console.error(' [ERROR] Navigation failed:', navError);
                Alert.alert('Navigation Error', 'Failed to navigate to waiting room: ' + navError.message);
              }
            }
          } else {
            console.error(' [ERROR] Backend rejected acceptance:', response);
            Alert.alert('DEBUG', 'Socket callback failed: ' + JSON.stringify(response));
          }
        }
      );
      
      console.log(' [DEBUG] booking_response event emitted successfully');
      
    } catch (error) {
      console.error(' [ERROR] Exception in handleAcceptBooking:', error);
      setIsAccepting(false);
      Alert.alert('Error', 'Failed to accept booking. Please try again.');
    }
  }, [socket, bookingRequest, navigation]);

  // Handle reject booking request using socket event
  const handleRejectBooking = useCallback(async () => {
    console.log(' [DEBUG] handleRejectBooking called - START');
    console.log(' [DEBUG] Current booking request:', bookingRequest);
    console.log(' [DEBUG] Socket available:', !!socket);
    console.log(' [DEBUG] Socket connected:', socket?.connected);
    
    // Store booking request data locally to prevent state clearing issues
    const currentBookingRequest = bookingRequest;
    console.log(' [DEBUG] Stored booking request locally:', currentBookingRequest);
    
    if (!socket) {
      console.error(' [ERROR] Socket is not available');
      Alert.alert('Error', 'Connection not available. Please try again.');
      return;
    }

    if (!socket.connected) {
      console.error(' [ERROR] Socket is not connected');
      Alert.alert('Error', 'Not connected to server. Please try again.');
      return;
    }

    if (!currentBookingRequest?._id) {
      console.error(' [ERROR] No booking request ID available');
      console.error(' [ERROR] currentBookingRequest:', currentBookingRequest);
      Alert.alert('Error', 'Invalid booking request.');
      return;
    }

    try {
      setIsRejecting(true);
      console.log(' [DEBUG] About to emit booking_response event');
      console.log(' [DEBUG] Payload:', { bookingId: currentBookingRequest._id, status: 'rejected' });
      
      socket.emit('booking_response', 
        { bookingId: currentBookingRequest._id, status: 'rejected' },
        (response) => {
          console.log(' [DEBUG] Socket callback received:', response);
          setIsRejecting(false);
          
          if (response?.success) {
            console.log(' [SUCCESS] Booking rejected successfully');
            setIsPopupVisible(false);
            setBookingRequest(null);
            Alert.alert('Success', 'Booking rejected successfully');
          } else {
            console.error(' [ERROR] Backend rejected rejection:', response);
            Alert.alert('Error', response?.message || 'Failed to reject booking');
          }
        }
      );
      
      console.log(' [DEBUG] booking_response event emitted successfully');
      
    } catch (error) {
      console.error(' [ERROR] Exception in handleRejectBooking:', error);
      setIsRejecting(false);
      Alert.alert('Error', 'Failed to reject booking. Please try again.');
    }
  }, [socket, bookingRequest]);

  // Close popup without responding (should be used carefully)
  const handleClose = useCallback(() => {
    console.log('Booking request popup closed without response');
    setIsPopupVisible(false);
    setError(null);
    setBookingRequest(null);
    
    // Note: This should be used carefully as it doesn't respond to the request
    // Consider auto-rejecting if popup is closed without a response
  }, []);

  
  // Set up socket listener for booking requests and lifecycle events
  useEffect(() => {
    if (!socket || !isConnected) {
      console.log('Socket not connected, skipping booking request listener setup');
      return;
    }

    // Add delay to ensure socket is fully ready after reconnection
    const setupListeners = () => {
      console.log('🔧 [BookingRequestHandler] Setting up booking request and lifecycle listeners');
      console.log('🔧 [BookingRequestHandler] Socket ID:', socket.id);
      console.log('🔧 [BookingRequestHandler] Socket connected:', socket.connected);
      console.log('🔧 [BookingRequestHandler] Socket authenticated:', socket.auth);
      console.log('🔧 [BookingRequestHandler] Socket transport:', socket.io?.engine?.transport?.name);
      console.log('🔧 [BookingRequestHandler] Current timestamp:', new Date().toISOString());
      
      // Verify socket is actually ready
      }
    }
  );
  
  console.log(' [DEBUG] booking_response event emitted successfully');
  
} catch (error) {
  console.error(' [ERROR] Exception in handleAcceptBooking:', error);
  setIsAccepting(false);
  Alert.alert('Error', 'Failed to accept booking. Please try again.');
}

// Handle reject booking request using socket event
const handleRejectBooking = useCallback(async () => {
  console.log(' [DEBUG] handleRejectBooking called - START');
  console.log(' [DEBUG] Current booking request:', bookingRequest);
  console.log(' [DEBUG] Socket available:', !!socket);
  console.log(' [DEBUG] Socket connected:', socket?.connected);
  
  // Store booking request data locally to prevent state clearing issues
  const currentBookingRequest = bookingRequest;
  console.log(' [DEBUG] Stored booking request locally:', currentBookingRequest);
  
  if (!socket) {
    console.error(' [ERROR] Socket is not available');
    Alert.alert('Error', 'Connection not available. Please try again.');
    return;
  }

  if (!socket.connected) {
    console.error(' [ERROR] Socket is not connected');
    Alert.alert('Error', 'Not connected to server. Please try again.');
    return;
  }

  if (!currentBookingRequest?._id) {
    console.error(' [ERROR] No booking request ID available');
    console.error(' [ERROR] currentBookingRequest:', currentBookingRequest);
    Alert.alert('Error', 'Invalid booking request.');
    return;
  }

  try {
    setIsRejecting(true);
    console.log(' [DEBUG] About to emit booking_response event');
    console.log(' [DEBUG] Payload:', { bookingId: currentBookingRequest._id, status: 'rejected' });
    
    socket.emit('booking_response', 
      { bookingId: currentBookingRequest._id, status: 'rejected' },
      (response) => {
        console.log(' [DEBUG] Socket callback received:', response);
        setIsRejecting(false);
        
        if (response?.success) {
          console.log(' [SUCCESS] Booking rejected successfully');
          setIsPopupVisible(false);
          setBookingRequest(null);
          Alert.alert('Success', 'Booking rejected successfully');
        } else {
          console.error(' [ERROR] Backend rejected rejection:', response);
          Alert.alert('Error', response?.message || 'Failed to reject booking');
        }
      }
    );
    
    console.log(' [DEBUG] booking_response event emitted successfully');
    
  } catch (error) {
    console.error(' [ERROR] Exception in handleRejectBooking:', error);
    setIsRejecting(false);
    Alert.alert('Error', 'Failed to reject booking. Please try again.');
  }
}, [socket, bookingRequest]);

// Close popup without responding (should be used carefully)
const handleClose = useCallback(() => {
  console.log('Booking request popup closed without response');
  setIsPopupVisible(false);
  setError(null);
  setBookingRequest(null);
  
  // Note: This should be used carefully as it doesn't respond to the request
  // Consider auto-rejecting if popup is closed without a response
}, []);

// Set up socket listener for booking requests and lifecycle events
useEffect(() => {
  if (!socket || !isConnected) {
    console.log('Socket not connected, skipping booking request listener setup');
    return;
  }

  // Add delay to ensure socket is fully ready after reconnection
  const setupListeners = () => {
    console.log('🔧 [BookingRequestHandler] Setting up booking request and lifecycle listeners');
    console.log('🔧 [BookingRequestHandler] Socket ID:', socket.id);
    console.log('🔧 [BookingRequestHandler] Socket connected:', socket.connected);
    console.log('🔧 [BookingRequestHandler] Socket authenticated:', socket.auth);
    console.log('🔧 [BookingRequestHandler] Socket transport:', socket.io?.engine?.transport?.name);
    console.log('🔧 [BookingRequestHandler] Current timestamp:', new Date().toISOString());
    
    // Verify socket is actually ready
    if (!socket.connected) {
      console.warn('⚠️ [BookingRequestHandler] Socket not connected, delaying listener setup');
      setTimeout(setupListeners, 1000);
      return;
    }
    
    console.log('👂 [BookingRequestHandler] Attaching socket event listeners...');
    
    // Listen for new booking requests
    socket.on('booking_request', (bookingData) => {
      console.log('🔥🔥🔥 [BookingRequestHandler] BOOKING REQUEST RECEIVED! 🔥🔥🔥');
      console.log('🔥 [BookingRequestHandler] Socket ID:', socket.id);
      console.log('🔥 [BookingRequestHandler] Socket connected:', socket.connected);
      console.log('🔥 [BookingRequestHandler] Timestamp:', new Date().toISOString());
      console.log('🔥 [BookingRequestHandler] Raw booking data:', JSON.stringify(bookingData, null, 2));
      
      // Handle reliable socket message format
      let actualBookingData = bookingData;
      if (bookingData.meta && bookingData.payload) {
        // This is a reliable socket message, extract the actual booking data
        actualBookingData = bookingData.payload;
        console.log('🔥 [BookingRequestHandler] Extracted booking data from reliable socket message:', JSON.stringify(actualBookingData, null, 2));
        
        // Send ACK if required
        if (bookingData.meta.requiresAck && bookingData.meta.messageId) {
          console.log(`✅ [BookingRequestHandler] Sending ACK for message ${bookingData.meta.messageId}`);
          console.log('✅ [BookingRequestHandler] ACK payload:', {
            messageId: bookingData.meta.messageId,
            status: 'received',
            timestamp: new Date().toISOString(),
            clientType: 'astrologer-app'
          });
          
          try {
            socket.emit('ack', {
              messageId: bookingData.meta.messageId,
              status: 'received',
              timestamp: new Date().toISOString(),
              clientType: 'astrologer-app'
            });
            console.log('✅ [BookingRequestHandler] ACK sent successfully');
          } catch (error) {
            console.error('❌ [BookingRequestHandler] Failed to send ACK:', error);
          }
        } else {
          console.warn('⚠️ [BookingRequestHandler] No ACK required or missing messageId');
          console.warn('⚠️ [BookingRequestHandler] requiresAck:', bookingData.meta?.requiresAck);
          console.warn('⚠️ [BookingRequestHandler] messageId:', bookingData.meta?.messageId);
        }
      } else {
        console.log('🔥 [BookingRequestHandler] Direct booking data (no reliable socket wrapper)');
      }
      
      try {
        handleBookingRequest(actualBookingData);
        console.log('✅ [BookingRequestHandler] Booking request handled successfully');
      } catch (error) {
        console.error('❌ [BookingRequestHandler] Failed to handle booking request:', error);
      }
    });

    // Listen for booking lifecycle events
    socket.on('booking_expired', (data) => {
      console.log('Booking expired:', data);
      if (bookingRequest && bookingRequest._id === data.bookingId) {
        setIsPopupVisible(false);
        setBookingRequest(null);
        Alert.alert('Booking Expired', 'The booking request has expired.');
      }
    });

    // Listen for booking response confirmation
    socket.on('booking_response_confirmed', (data) => {
      console.log(' [DEBUG] Booking response confirmed:', data);
      if (data.success) {
        console.log(`Booking ${data.bookingId} ${data.status} confirmed by backend`);
      }
    });

    // Listen for booking status updates - navigate to WaitingRoom when accepted
    socket.on('booking_status_update', (data) => {
      console.log('🔥🔥🔥 [ASTROLOGER-APP] booking_status_update event received! 🔥🔥🔥');
      console.log(' [DEBUG] Raw event data:', JSON.stringify(data, null, 2));
      console.log(' [DEBUG] Socket ID:', socket?.id);
      console.log(' [DEBUG] Socket connected:', socket?.connected);
      console.log(' [DEBUG] Event timestamp:', new Date().toISOString());
      console.log(' [DEBUG] Status:', data.status);
      console.log(' [DEBUG] Booking ID:', data.bookingId);
      
      try {
        // Navigate to WaitingRoom when booking is accepted by astrologer
        if (data.status === 'accepted' && data.bookingId) {
          console.log(' [DEBUG] Booking accepted - navigating to WaitingRoom');
          navigation.navigate('Bookings', {
            screen: 'WaitingRoom',
            params: {
              bookingId: data.bookingId,
              sessionId: data.sessionId,
              roomId: data.roomId,
              consultationType: data.consultationType,
              bookingDetails: data.bookingDetails
            }
          });
        }
      } catch (error) {
        console.error(' [ERROR] Failed to handle booking status update:', error);
      }
    });

    // Listen for user joined consultation event
    socket.on('user_joined_consultation', (data) => {
      console.log('🔥🔥🔥 [ASTROLOGER-APP] user_joined_consultation event received! 🔥🔥🔥');
      console.log(' [DEBUG] Raw event data:', JSON.stringify(data, null, 2));
      console.log(' [DEBUG] Socket ID:', socket?.id);
      console.log(' [DEBUG] Socket connected:', socket?.connected);
      console.log(' [DEBUG] Event timestamp:', new Date().toISOString());
      console.log(' [DEBUG] Consultation type:', data.consultationType);
      console.log(' [DEBUG] Booking ID:', data.bookingId);
      
      try {
        // Navigate to appropriate consultation screen based on type
        if (data.consultationType === 'video') {
          console.log(' [DEBUG] Navigating to VideoCall screen');
          navigation.navigate('BookingsVideoCall', {
            bookingId: data.bookingId,
            sessionId: data.sessionId,
            roomId: data.roomId,
            consultationType: 'video',
            bookingDetails: data.bookingDetails
          });
        } else if (data.consultationType === 'voice') {
          console.log(' [DEBUG] Navigating to VoiceCall screen');
          navigation.navigate('BookingsVoiceCall', {
            bookingId: data.bookingId,
            sessionId: data.sessionId,
            roomId: data.roomId,
            consultationType: 'voice',
            bookingDetails: data.bookingDetails
          });
        } else if (data.consultationType === 'chat') {
          console.log(' [DEBUG] Navigating to Chat screen');
          navigation.navigate('BookingsEnhancedChat', {
            bookingId: data.bookingId,
            sessionId: data.sessionId,
            roomId: data.roomId,
            consultationType: 'chat',
            bookingDetails: data.bookingDetails
          });
        } else {
          console.error(' [ERROR] Unknown consultation type:', data.consultationType);
          Alert.alert('Error', 'Unknown consultation type: ' + data.consultationType);
        }
      } catch (navError) {
        console.error(' [ERROR] Navigation to session screen failed:', navError);
        Alert.alert('Navigation Error', 'Failed to navigate to session screen: ' + navError.message);
      }
    });

    socket.on('booking_cancelled', (data) => {
      console.log('Booking cancelled:', data);
      if (bookingRequest && bookingRequest._id === data.bookingId) {
        setIsPopupVisible(false);
        setBookingRequest(null);
        Alert.alert('Booking Cancelled', 'The booking has been cancelled.');
      }
    });
    
    console.log('✅ [BookingRequestHandler] All socket event listeners attached successfully');
  };
    // Monitor all outgoing events
    socket.emit = function(event, ...args) {
      console.log('📤 [BookingRequestHandler] Emitting event:', event);
      if (event === 'ack') {
        console.log('📤 [BookingRequestHandler] ACK details:', args[0]);
      }
      return originalEmit.apply(this, [event, ...args]);
    };
    
    // Global event monitor - catch ALL incoming events
    const originalOnevent = socket.onevent;
    socket.onevent = function(packet) {
      const [event, ...args] = packet.data || [];
      console.log('📥 [BookingRequestHandler] GLOBAL EVENT MONITOR - Received:', event);
      
      if (event === 'booking_request') {
        console.log('🚨 [BookingRequestHandler] BOOKING REQUEST DETECTED BY GLOBAL MONITOR!');
        console.log('🚨 [BookingRequestHandler] Event data:', JSON.stringify(args[0], null, 2));
      }
      
      return originalOnevent.call(this, packet);
    };
    
    // Setup listeners immediately if socket is ready, otherwise delay
    if (socket.connected) {
      setupListeners();
    } else {
      console.log('⏳ [BookingRequestHandler] Socket not ready, waiting for connection...');
      setTimeout(setupListeners, 1000);
    }

    // Clean up listeners on unmount
    return () => {
      console.log('🧹 [BookingRequestHandler] Cleaning up booking request and lifecycle listeners');
      console.log('🧹 [BookingRequestHandler] Socket ID during cleanup:', socket?.id);
      if (socket) {
        // Restore original socket methods
        socket.emit = originalEmit;
        socket.onevent = originalOnevent;
        
        socket.off('booking_request');
        socket.off('booking_expired');
        socket.off('booking_response_confirmed');
        socket.off('booking_status_update');
        socket.off('user_joined_consultation');
        socket.off('booking_cancelled');
        
        console.log('🧹 [BookingRequestHandler] All listeners removed');
      }
    };
  }, [socket, isConnected]); // Removed unstable dependencies

  
  return (
    <View>
      <BookingRequestPopup
        visible={isPopupVisible}
        bookingRequest={bookingRequest}
        onAccept={handleAcceptBooking}
        onReject={handleRejectBooking}
        onClose={handleClose}
        loading={isAccepting || isRejecting}
        error={error}
      />
    </View>
  );
};

export default BookingRequestHandler;
